// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/fee.proto

package fee

import (
	fmt "fmt"
	_ "github.com/essayZW/hpcmanager/gateway/proto"
	proto1 "github.com/essayZW/hpcmanager/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Fee service

func NewFeeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Fee service

type FeeService interface {
	Ping(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*proto1.PingResponse, error)
	CreateNodeDistributeBill(ctx context.Context, in *CreateNodeDistributeBillRequest, opts ...client.CallOption) (*CreateNodeDistributeBillResponse, error)
	PaginationGetNodeDistributeBill(ctx context.Context, in *PaginationGetNodeDistributeBillRequest, opts ...client.CallOption) (*PaginationGetNodeDistributeBillResponse, error)
	PayNodeDistributeBill(ctx context.Context, in *PayNodeDistributeBillRequest, opts ...client.CallOption) (*PayNodeDistributeBillResponse, error)
	GetNodeDistributeFeeRate(ctx context.Context, in *GetNodeDistributeFeeRateRequest, opts ...client.CallOption) (*GetNodeDistributeFeeRateResponse, error)
}

type feeService struct {
	c    client.Client
	name string
}

func NewFeeService(name string, c client.Client) FeeService {
	return &feeService{
		c:    c,
		name: name,
	}
}

func (c *feeService) Ping(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*proto1.PingResponse, error) {
	req := c.c.NewRequest(c.name, "Fee.Ping", in)
	out := new(proto1.PingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeService) CreateNodeDistributeBill(ctx context.Context, in *CreateNodeDistributeBillRequest, opts ...client.CallOption) (*CreateNodeDistributeBillResponse, error) {
	req := c.c.NewRequest(c.name, "Fee.CreateNodeDistributeBill", in)
	out := new(CreateNodeDistributeBillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeService) PaginationGetNodeDistributeBill(ctx context.Context, in *PaginationGetNodeDistributeBillRequest, opts ...client.CallOption) (*PaginationGetNodeDistributeBillResponse, error) {
	req := c.c.NewRequest(c.name, "Fee.PaginationGetNodeDistributeBill", in)
	out := new(PaginationGetNodeDistributeBillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeService) PayNodeDistributeBill(ctx context.Context, in *PayNodeDistributeBillRequest, opts ...client.CallOption) (*PayNodeDistributeBillResponse, error) {
	req := c.c.NewRequest(c.name, "Fee.PayNodeDistributeBill", in)
	out := new(PayNodeDistributeBillResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feeService) GetNodeDistributeFeeRate(ctx context.Context, in *GetNodeDistributeFeeRateRequest, opts ...client.CallOption) (*GetNodeDistributeFeeRateResponse, error) {
	req := c.c.NewRequest(c.name, "Fee.GetNodeDistributeFeeRate", in)
	out := new(GetNodeDistributeFeeRateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fee service

type FeeHandler interface {
	Ping(context.Context, *proto1.Empty, *proto1.PingResponse) error
	CreateNodeDistributeBill(context.Context, *CreateNodeDistributeBillRequest, *CreateNodeDistributeBillResponse) error
	PaginationGetNodeDistributeBill(context.Context, *PaginationGetNodeDistributeBillRequest, *PaginationGetNodeDistributeBillResponse) error
	PayNodeDistributeBill(context.Context, *PayNodeDistributeBillRequest, *PayNodeDistributeBillResponse) error
	GetNodeDistributeFeeRate(context.Context, *GetNodeDistributeFeeRateRequest, *GetNodeDistributeFeeRateResponse) error
}

func RegisterFeeHandler(s server.Server, hdlr FeeHandler, opts ...server.HandlerOption) error {
	type fee interface {
		Ping(ctx context.Context, in *proto1.Empty, out *proto1.PingResponse) error
		CreateNodeDistributeBill(ctx context.Context, in *CreateNodeDistributeBillRequest, out *CreateNodeDistributeBillResponse) error
		PaginationGetNodeDistributeBill(ctx context.Context, in *PaginationGetNodeDistributeBillRequest, out *PaginationGetNodeDistributeBillResponse) error
		PayNodeDistributeBill(ctx context.Context, in *PayNodeDistributeBillRequest, out *PayNodeDistributeBillResponse) error
		GetNodeDistributeFeeRate(ctx context.Context, in *GetNodeDistributeFeeRateRequest, out *GetNodeDistributeFeeRateResponse) error
	}
	type Fee struct {
		fee
	}
	h := &feeHandler{hdlr}
	return s.Handle(s.NewHandler(&Fee{h}, opts...))
}

type feeHandler struct {
	FeeHandler
}

func (h *feeHandler) Ping(ctx context.Context, in *proto1.Empty, out *proto1.PingResponse) error {
	return h.FeeHandler.Ping(ctx, in, out)
}

func (h *feeHandler) CreateNodeDistributeBill(ctx context.Context, in *CreateNodeDistributeBillRequest, out *CreateNodeDistributeBillResponse) error {
	return h.FeeHandler.CreateNodeDistributeBill(ctx, in, out)
}

func (h *feeHandler) PaginationGetNodeDistributeBill(ctx context.Context, in *PaginationGetNodeDistributeBillRequest, out *PaginationGetNodeDistributeBillResponse) error {
	return h.FeeHandler.PaginationGetNodeDistributeBill(ctx, in, out)
}

func (h *feeHandler) PayNodeDistributeBill(ctx context.Context, in *PayNodeDistributeBillRequest, out *PayNodeDistributeBillResponse) error {
	return h.FeeHandler.PayNodeDistributeBill(ctx, in, out)
}

func (h *feeHandler) GetNodeDistributeFeeRate(ctx context.Context, in *GetNodeDistributeFeeRateRequest, out *GetNodeDistributeFeeRateResponse) error {
	return h.FeeHandler.GetNodeDistributeFeeRate(ctx, in, out)
}
