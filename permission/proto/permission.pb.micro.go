// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/permission.proto

package permission

import (
	fmt "fmt"
	_ "github.com/essayZW/hpcmanager/gateway/proto"
	proto1 "github.com/essayZW/hpcmanager/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Permission service

func NewPermissionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Permission service

type PermissionService interface {
	Ping(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*proto1.PingResponse, error)
	GetUserPermission(ctx context.Context, in *GetUserPermissionRequest, opts ...client.CallOption) (*GetUserPermissionResponse, error)
	AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, opts ...client.CallOption) (*AddUserPermissionResponse, error)
}

type permissionService struct {
	c    client.Client
	name string
}

func NewPermissionService(name string, c client.Client) PermissionService {
	return &permissionService{
		c:    c,
		name: name,
	}
}

func (c *permissionService) Ping(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*proto1.PingResponse, error) {
	req := c.c.NewRequest(c.name, "Permission.Ping", in)
	out := new(proto1.PingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) GetUserPermission(ctx context.Context, in *GetUserPermissionRequest, opts ...client.CallOption) (*GetUserPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "Permission.GetUserPermission", in)
	out := new(GetUserPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, opts ...client.CallOption) (*AddUserPermissionResponse, error) {
	req := c.c.NewRequest(c.name, "Permission.AddUserPermission", in)
	out := new(AddUserPermissionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permission service

type PermissionHandler interface {
	Ping(context.Context, *proto1.Empty, *proto1.PingResponse) error
	GetUserPermission(context.Context, *GetUserPermissionRequest, *GetUserPermissionResponse) error
	AddUserPermission(context.Context, *AddUserPermissionRequest, *AddUserPermissionResponse) error
}

func RegisterPermissionHandler(s server.Server, hdlr PermissionHandler, opts ...server.HandlerOption) error {
	type permission interface {
		Ping(ctx context.Context, in *proto1.Empty, out *proto1.PingResponse) error
		GetUserPermission(ctx context.Context, in *GetUserPermissionRequest, out *GetUserPermissionResponse) error
		AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, out *AddUserPermissionResponse) error
	}
	type Permission struct {
		permission
	}
	h := &permissionHandler{hdlr}
	return s.Handle(s.NewHandler(&Permission{h}, opts...))
}

type permissionHandler struct {
	PermissionHandler
}

func (h *permissionHandler) Ping(ctx context.Context, in *proto1.Empty, out *proto1.PingResponse) error {
	return h.PermissionHandler.Ping(ctx, in, out)
}

func (h *permissionHandler) GetUserPermission(ctx context.Context, in *GetUserPermissionRequest, out *GetUserPermissionResponse) error {
	return h.PermissionHandler.GetUserPermission(ctx, in, out)
}

func (h *permissionHandler) AddUserPermission(ctx context.Context, in *AddUserPermissionRequest, out *AddUserPermissionResponse) error {
	return h.PermissionHandler.AddUserPermission(ctx, in, out)
}
