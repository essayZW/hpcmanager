// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/node.proto

package node

import (
	fmt "fmt"
	_ "github.com/essayZW/hpcmanager/gateway/proto"
	proto1 "github.com/essayZW/hpcmanager/proto"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Node service

func NewNodeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Node service

type NodeService interface {
	Ping(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*proto1.PingResponse, error)
	CreateNodeApply(ctx context.Context, in *CreateNodeApplyRequest, opts ...client.CallOption) (*CreateNodeApplyResponse, error)
	PaginationGetNodeApply(ctx context.Context, in *PaginationGetNodeApplyRequest, opts ...client.CallOption) (*PaginationGetNodeApplyResponse, error)
	CheckNodeApply(ctx context.Context, in *CheckNodeApplyRequest, opts ...client.CallOption) (*CheckNodeApplyResponse, error)
	CreateNodeDistributeWO(ctx context.Context, in *CreateNodeDistributeWORequest, opts ...client.CallOption) (*CreateNodeDistributeWOResponse, error)
	PaginationGetNodeDistributeWO(ctx context.Context, in *PaginationGetNodeDistributeWORequest, opts ...client.CallOption) (*PaginationGetNodeDistributeWOResponse, error)
	GetNodeApplyByID(ctx context.Context, in *GetNodeApplyByIDRequest, opts ...client.CallOption) (*GetNodeApplyByIDResponse, error)
	FinishNodeDistributeWO(ctx context.Context, in *FinishNodeDistributeWORequest, opts ...client.CallOption) (*FinishNodeDistributeWOResponse, error)
}

type nodeService struct {
	c    client.Client
	name string
}

func NewNodeService(name string, c client.Client) NodeService {
	return &nodeService{
		c:    c,
		name: name,
	}
}

func (c *nodeService) Ping(ctx context.Context, in *proto1.Empty, opts ...client.CallOption) (*proto1.PingResponse, error) {
	req := c.c.NewRequest(c.name, "Node.Ping", in)
	out := new(proto1.PingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) CreateNodeApply(ctx context.Context, in *CreateNodeApplyRequest, opts ...client.CallOption) (*CreateNodeApplyResponse, error) {
	req := c.c.NewRequest(c.name, "Node.CreateNodeApply", in)
	out := new(CreateNodeApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) PaginationGetNodeApply(ctx context.Context, in *PaginationGetNodeApplyRequest, opts ...client.CallOption) (*PaginationGetNodeApplyResponse, error) {
	req := c.c.NewRequest(c.name, "Node.PaginationGetNodeApply", in)
	out := new(PaginationGetNodeApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) CheckNodeApply(ctx context.Context, in *CheckNodeApplyRequest, opts ...client.CallOption) (*CheckNodeApplyResponse, error) {
	req := c.c.NewRequest(c.name, "Node.CheckNodeApply", in)
	out := new(CheckNodeApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) CreateNodeDistributeWO(ctx context.Context, in *CreateNodeDistributeWORequest, opts ...client.CallOption) (*CreateNodeDistributeWOResponse, error) {
	req := c.c.NewRequest(c.name, "Node.CreateNodeDistributeWO", in)
	out := new(CreateNodeDistributeWOResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) PaginationGetNodeDistributeWO(ctx context.Context, in *PaginationGetNodeDistributeWORequest, opts ...client.CallOption) (*PaginationGetNodeDistributeWOResponse, error) {
	req := c.c.NewRequest(c.name, "Node.PaginationGetNodeDistributeWO", in)
	out := new(PaginationGetNodeDistributeWOResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) GetNodeApplyByID(ctx context.Context, in *GetNodeApplyByIDRequest, opts ...client.CallOption) (*GetNodeApplyByIDResponse, error) {
	req := c.c.NewRequest(c.name, "Node.GetNodeApplyByID", in)
	out := new(GetNodeApplyByIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeService) FinishNodeDistributeWO(ctx context.Context, in *FinishNodeDistributeWORequest, opts ...client.CallOption) (*FinishNodeDistributeWOResponse, error) {
	req := c.c.NewRequest(c.name, "Node.FinishNodeDistributeWO", in)
	out := new(FinishNodeDistributeWOResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeHandler interface {
	Ping(context.Context, *proto1.Empty, *proto1.PingResponse) error
	CreateNodeApply(context.Context, *CreateNodeApplyRequest, *CreateNodeApplyResponse) error
	PaginationGetNodeApply(context.Context, *PaginationGetNodeApplyRequest, *PaginationGetNodeApplyResponse) error
	CheckNodeApply(context.Context, *CheckNodeApplyRequest, *CheckNodeApplyResponse) error
	CreateNodeDistributeWO(context.Context, *CreateNodeDistributeWORequest, *CreateNodeDistributeWOResponse) error
	PaginationGetNodeDistributeWO(context.Context, *PaginationGetNodeDistributeWORequest, *PaginationGetNodeDistributeWOResponse) error
	GetNodeApplyByID(context.Context, *GetNodeApplyByIDRequest, *GetNodeApplyByIDResponse) error
	FinishNodeDistributeWO(context.Context, *FinishNodeDistributeWORequest, *FinishNodeDistributeWOResponse) error
}

func RegisterNodeHandler(s server.Server, hdlr NodeHandler, opts ...server.HandlerOption) error {
	type node interface {
		Ping(ctx context.Context, in *proto1.Empty, out *proto1.PingResponse) error
		CreateNodeApply(ctx context.Context, in *CreateNodeApplyRequest, out *CreateNodeApplyResponse) error
		PaginationGetNodeApply(ctx context.Context, in *PaginationGetNodeApplyRequest, out *PaginationGetNodeApplyResponse) error
		CheckNodeApply(ctx context.Context, in *CheckNodeApplyRequest, out *CheckNodeApplyResponse) error
		CreateNodeDistributeWO(ctx context.Context, in *CreateNodeDistributeWORequest, out *CreateNodeDistributeWOResponse) error
		PaginationGetNodeDistributeWO(ctx context.Context, in *PaginationGetNodeDistributeWORequest, out *PaginationGetNodeDistributeWOResponse) error
		GetNodeApplyByID(ctx context.Context, in *GetNodeApplyByIDRequest, out *GetNodeApplyByIDResponse) error
		FinishNodeDistributeWO(ctx context.Context, in *FinishNodeDistributeWORequest, out *FinishNodeDistributeWOResponse) error
	}
	type Node struct {
		node
	}
	h := &nodeHandler{hdlr}
	return s.Handle(s.NewHandler(&Node{h}, opts...))
}

type nodeHandler struct {
	NodeHandler
}

func (h *nodeHandler) Ping(ctx context.Context, in *proto1.Empty, out *proto1.PingResponse) error {
	return h.NodeHandler.Ping(ctx, in, out)
}

func (h *nodeHandler) CreateNodeApply(ctx context.Context, in *CreateNodeApplyRequest, out *CreateNodeApplyResponse) error {
	return h.NodeHandler.CreateNodeApply(ctx, in, out)
}

func (h *nodeHandler) PaginationGetNodeApply(ctx context.Context, in *PaginationGetNodeApplyRequest, out *PaginationGetNodeApplyResponse) error {
	return h.NodeHandler.PaginationGetNodeApply(ctx, in, out)
}

func (h *nodeHandler) CheckNodeApply(ctx context.Context, in *CheckNodeApplyRequest, out *CheckNodeApplyResponse) error {
	return h.NodeHandler.CheckNodeApply(ctx, in, out)
}

func (h *nodeHandler) CreateNodeDistributeWO(ctx context.Context, in *CreateNodeDistributeWORequest, out *CreateNodeDistributeWOResponse) error {
	return h.NodeHandler.CreateNodeDistributeWO(ctx, in, out)
}

func (h *nodeHandler) PaginationGetNodeDistributeWO(ctx context.Context, in *PaginationGetNodeDistributeWORequest, out *PaginationGetNodeDistributeWOResponse) error {
	return h.NodeHandler.PaginationGetNodeDistributeWO(ctx, in, out)
}

func (h *nodeHandler) GetNodeApplyByID(ctx context.Context, in *GetNodeApplyByIDRequest, out *GetNodeApplyByIDResponse) error {
	return h.NodeHandler.GetNodeApplyByID(ctx, in, out)
}

func (h *nodeHandler) FinishNodeDistributeWO(ctx context.Context, in *FinishNodeDistributeWORequest, out *FinishNodeDistributeWOResponse) error {
	return h.NodeHandler.FinishNodeDistributeWO(ctx, in, out)
}
